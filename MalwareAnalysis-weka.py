import os
import traceback
import numpy as np
import pandas as pd
import csv

import weka.core.jvm as jvm
import weka.core.converters as converters
from weka.core.classes import Random
from weka.classifiers import Classifier, Evaluation, SingleClassifierEnhancer, MultipleClassifiersCombiner, FilteredClassifier, PredictionOutput, Kernel, KernelClassifier

def main():
	print("Reading Data...")
	data = converters.load_any_file("data.csv")
	data.class_is_last()
	print("Data Reading Completed\n")	
	
	print("J48 Classifier")
	classifier = Classifier(classname="weka.classifiers.trees.J48", options=["-C", "0.3"])
	evaluation = Evaluation(data)
	evaluation.evaluate_train_test_split(classifier, data, 70.0, Random(1))
	print(evaluation.summary())
	print("")
	
	print("SMO Classifier")
	kernel = Kernel(classname="weka.classifiers.functions.supportVector.RBFKernel", options=["-G", "0.001"])
	classifier = KernelClassifier(classname="weka.classifiers.functions.SMO", options=["-M"])
	classifier.kernel = kernel
	evaluation = Evaluation(data)
	evaluation.evaluate_train_test_split(classifier, data, 70.0, Random(1))
	print(evaluation.summary())
	
	print("BayesNet Classifier")
	classifier = Classifier(classname="weka.classifiers.bayes.BayesNet",
    						options=["-Q", "weka.classifiers.bayes.net.search.local.K2", "--", "-P", "2"])
	evaluation = Evaluation(data)
	evaluation.evaluate_train_test_split(classifier, data, 70.0, Random(1))
	print(evaluation.summary())
	print("")
	
	print("NaiveBayes Classifier")
	classifier = Classifier(classname="weka.classifiers.bayes.NaiveBayes")
	evaluation = Evaluation(data)
	evaluation.evaluate_train_test_split(classifier, data, 70.0, Random(1))
	print(evaluation.summary())
	print("")
	
	print("Logistic Classifier")
	classifier = Classifier(classname="weka.classifiers.functions.Logistic")
	evaluation = Evaluation(data)
	evaluation.evaluate_train_test_split(classifier, data, 70.0, Random(1))
	print(evaluation.summary())
	print("")
	
	print("MultilayerPerceptron Classifier")
	classifier = Classifier(classname="weka.classifiers.functions.MultilayerPerceptron")
	evaluation = Evaluation(data)
	evaluation.evaluate_train_test_split(classifier, data, 70.0, Random(1))
	print(evaluation.summary())
	print("")
	
	print("SimpleLogistic Classifier")
	classifier = Classifier(classname="weka.classifiers.functions.SimpleLogistic")
	evaluation = Evaluation(data)
	evaluation.evaluate_train_test_split(classifier, data, 70.0, Random(1))
	print(evaluation.summary())
	print("")
	
	print("SGD Classifier")
	classifier = Classifier(classname="weka.classifiers.functions.SGD")
	evaluation = Evaluation(data)
	evaluation.evaluate_train_test_split(classifier, data, 70.0, Random(1))
	print(evaluation.summary())
	print("")
	
	print("SMO Classifier")
	classifier = Classifier(classname="weka.classifiers.functions.SMO")
	evaluation = Evaluation(data)
	evaluation.evaluate_train_test_split(classifier, data, 70.0, Random(1))
	print(evaluation.summary())
	print("")
	
	print("JRip Classifier")
	classifier = Classifier(classname="weka.classifiers.rules.JRip")
	evaluation = Evaluation(data)
	evaluation.evaluate_train_test_split(classifier, data, 70.0, Random(1))
	print(evaluation.summary())
	print("")
	
	print("OneR Classifier")
	classifier = Classifier(classname="weka.classifiers.rules.OneR")
	evaluation = Evaluation(data)
	evaluation.evaluate_train_test_split(classifier, data, 70.0, Random(1))
	print(evaluation.summary())
	print("")
	
	print("PART Classifier")
	classifier = Classifier(classname="weka.classifiers.rules.PART")
	evaluation = Evaluation(data)
	evaluation.evaluate_train_test_split(classifier, data, 70.0, Random(1))
	print(evaluation.summary())
	print("")
	

if __name__ == "__main__":
    try:
        jvm.start(max_heap_size="4096m")	# Set max heap size to 4096 MB = 4 GB
        main()
    except Exception as e:
        print(traceback.format_exc())
    finally:
        jvm.stop()
